from flask import Blueprint, jsonify, request, current_app as app
from flasgger import swag_from
from db.mongo import get_db
import logging

# Initialize the Blueprint
payslips_bp = Blueprint('payslips', __name__)
collection = get_db()['payslips']


# Route to list all payslips
@payslips_bp.route('/api/payslips', methods=['GET'])

@swag_from({
    'tags': ['Payslips'],
    'summary': 'List all payslips',
    'responses': {
        200: {
            'description': 'A list of payslips',
            'examples': {
                'application/json': [
                    {"employee_id": "E001", "month": "April 2025", "net_salary": 50000}
                ]
            }
        }
    }
})
def get_payslips():
    payslips = list(collection.find({}, {'_id': 0}))
    return jsonify(payslips)

# Route to get payslip by employee ID
@payslips_bp.route('/api/payslips/<employee_id>', methods=['GET'])
@swag_from({
    'tags': ['Payslips'],
    'summary': 'Get payslip by employee ID',
    'parameters': [
        {
            'name': 'employee_id',
            'in': 'path',
            'type': 'string',
            'required': True
        }
    ],
    'responses': {
        200: {'description': 'Payslip found'},
        404: {'description': 'Payslip not found'}
    }
})
def get_payslip(employee_id):
    payslip = collection.find_one({"employee_id": employee_id}, {'_id': 0})
    if payslip:
        return jsonify(payslip)
    # Debugging: Log when no payslip is found
    app.logger.error(f"Payslip not found for employee_id: {employee_id}")
    return jsonify({"error": "Payslip not found"}), 404

# Route to create a new payslip
@payslips_bp.route('/api/payslips', methods=['POST'])
@swag_from({
    'tags': ['Payslips'],
    'summary': 'Create a new payslip',
    'parameters': [
        {
            'name': 'body',
            'in': 'body',
            'required': True,
            'schema': {
                'example': {
                    "employee_id": "E002",
                    "employee": {"name": "John", "department": "IT"},
                    "company": {"name": "Mec", "location": "India"},
                    "month": "April 2025",
                    "earnings": [{"type": "Basic", "amount": 30000}],
                    "deductions": [{"type": "Tax", "amount": 2000}]
                }
            }
        }
    ],
    'responses': {
        201: {'description': 'Payslip created'},
        400: {'description': 'Invalid input'},
        409: {'description': 'Duplicate entry'}
    }
})
def create_payslip():
    data = request.json
    if not data or 'employee_id' not in data:
        return jsonify({"error": "Missing employee_id"}), 400

    if collection.find_one({"employee_id": data['employee_id']}):
        return jsonify({"error": "Payslip already exists for this employee"}), 409

    collection.insert_one(data)
    return jsonify({"message": "Payslip created"}), 201

# Route to update an existing payslip
@payslips_bp.route('/api/payslips/<employee_id>', methods=['PUT'])
@swag_from({
    'tags': ['Payslips'],
    'summary': 'Update an existing payslip',
    'parameters': [
        {'name': 'employee_id', 'in': 'path', 'type': 'string', 'required': True},
        {
            'name': 'body',
            'in': 'body',
            'required': True,
            'schema': {'example': {"month": "May 2025", "earnings": [{"type": "Bonus", "amount": 5000}]}}
        }
    ],
    'responses': {
        200: {'description': 'Payslip updated'},
        404: {'description': 'Payslip not found'}
    }
})
def update_payslip(employee_id):
    data = request.json
    if not data:
        return jsonify({"error": "No update data provided"}), 400

    result = collection.update_one({"employee_id": employee_id}, {"$set": data})
    if result.matched_count:
        return jsonify({"message": "Payslip updated"})
    return jsonify({"error": "Payslip not found"}), 404

# Route to delete a payslip by employee ID
@payslips_bp.route('/api/payslips/<employee_id>', methods=['DELETE'])
@swag_from({
    'tags': ['Payslips'],
    'summary': 'Delete a payslip by employee ID',
    'parameters': [
        {'name': 'employee_id', 'in': 'path', 'type': 'string', 'required': True}
    ],
    'responses': {
        200: {'description': 'Payslip deleted'},
        404: {'description': 'Payslip not found'}
    }
})
def delete_payslip(employee_id):
    result = collection.delete_one({"employee_id": employee_id})
    if result.deleted_count:
        return jsonify({"message": "Payslip deleted"})
    return jsonify({"error": "Payslip not found"}), 404
